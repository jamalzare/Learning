{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 OpenSans;}
{\colortbl;\red255\green255\blue255;\red27\green29\blue31;\red255\green255\blue255;\red44\green50\blue53;
\red245\green249\blue250;\red35\green35\blue35;\red57\green57\blue57;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c14118\c15294\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c22745\c25490\c27059;
\cssrgb\c96863\c98039\c98431;\cssrgb\c18039\c18039\c18039;\cssrgb\c29020\c29020\c29020;\cssrgb\c0\c0\c0\c84314;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic.tiff \width13920 \height3160 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 1.tiff \width13860 \height3340 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
{{\NeXTGraphic Pasted Graphic 3.tiff \width13900 \height2240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 4.tiff \width13920 \height2840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 5.tiff \width9460 \height2100 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 6.tiff \width11860 \height3020 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 7.tiff \width13300 \height3680 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 8.tiff \width10480 \height2820 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 9.tiff \width13160 \height2480 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 10.tiff \width12160 \height2840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
{{\NeXTGraphic Pasted Graphic 11.tiff \width12240 \height3500 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
\
\pard\pardeftab720\partightenfactor0

\f1\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
Both class and structure can do:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Define properties to store values\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Define methods to provide functionality\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Be extended\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Conform to protocols\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Define intialisers\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Define Subscripts to provide access to their variables\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Only class can do:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Inheritance\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Type casting\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Define deinitialisers\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Allow reference counting for multiple references.\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 * Struct properties are stored on Stack and Class instances are stored on Heap hence, sometimes the stack is drastically faster than a class.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Struct gets a default initializer automatically whereas in Class, we have to initialize.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Struct is thread safe or singleton at any point of time.\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\partightenfactor0

\f2\fs30\fsmilli15300 \cf4 \cb5 Structures
\f0\fs36 \cb1  and 
\f2\fs30\fsmilli15300 \cb5 Classes
\f0\fs36 \cb1  are very similar in Swift. Both can have properties, methods, subscripts, initializers, be extended, conform to protocols.\
\
KVO: Key Value Observer\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs72 \cf6 6. Could you explain what the difference is between Delegate and KVO?\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs36 \cf4 With this question your interviewer is assessing your knowledge of different types of messaging patterns used in iOS.\
\pard\pardeftab720\partightenfactor0

\b \cf4 Expected answer:
\b0 \cf4 \
Both are ways to have relationships between objects. {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html"}}{\fldrslt \cf7 \ul \ulc7 Delegation}} is a one-to-one relationship where one object implements a delegate protocol and another uses it and sends messages to it, assuming that those methods are implemented since the receiver promised to comply to the protocol. {\field{\*\fldinst{HYPERLINK "http://nshipster.com/key-value-observing/"}}{\fldrslt \cf7 \ul \ulc7 KVO}} is a many-to-many relationship where one object could broadcast a message and one or multiple other objects can listen to it and react. KVO does not rely on protocols. KVO is the first step and the fundamental block of reactive programming (RxSwift, ReactiveCocoa, etc.)\
\
\pard\pardeftab720\partightenfactor0

\i\b\fs42 \cf0 \cb3 Note: Any property we want to observe for changes must be KeyValueCoding (KVC)complaint.\
\
\pard\pardeftab720\partightenfactor0

\f3\i0\fs72 \cf6 \cb1 What design patterns are commonly used in iOS apps?
\f0\i\fs42 \cf0 \cb3 \
\pard\pardeftab720\partightenfactor0

\i0\b0\fs36 \cf4 \cb1 Typical commonly used patterns when building iOS applications are those that Apple advocates for in their Cocoa, Cocoa Touch, Objective-C, and Swift documentation. These are the patterns that every iOS developer learns. They include 
\b \cf4 MVC
\b0 \cf4 , 
\b \cf4 Singleton
\b0 \cf4 , 
\b \cf4 Delegate
\b0 \cf4 , and 
\b \cf4 Observer
\b0 \cf4 .
\f1\fs30 \cf2 \cb3 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf4 \cb1 The Interface Segregation Principle (ISP)
\b0 \cf4  says many client-specific interfaces are better than one general-purpose interface. It also states that no client should be forced to depend on and implemented methods it does not use.\
\

\b \cf4 The Dependency Inversion Principle (DIP)
\b0 \cf4  states, \'93depend on abstractions, not concretions.\'94 The best example that showcases this principle is the Dependency Injection (DI) technique. With the Dependency Injection technique, when you create an object, you supply and inject all of its dependencies upon its initialization or configuration rather than let the object create or fetch/find its dependencies for itself.\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs72 \cf6 What options do you have for implementing storage and persistence on iOS?
\f0\b0\fs36 \cf4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\b \cf4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
In-memory arrays, dictionaries, sets, and other data structures
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\b \cf4 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
NSUserDefaults/Keychain
\b0 \
\ls4\ilvl0
\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
File/Disk storage
\b0 \
\ls4\ilvl0
\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Core Data, Realm
\b0 \
\ls4\ilvl0
\b \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
SQLite
\f1\b0\fs30 \cf2 \cb3 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs72 \cf6 \cb1 What options do you have for implementing networking and HTTP on iOS?\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs36 \cf4 In iOS there are several options to implement HTTP networking. You can go with good old 
\b \cf4 NSURLSession
\b0 \cf4 , but unless you abstract it out well enough, it can be daunting to work with. Another option would be to use a wrapper library around it. The most popular solution on iOS is 
\b \cf4 Alamofire/AFNetworking
\b0 \cf4 .\
\
serialization:\
Every time you receive JSON or XML or any other kind of response from a backend API, you most likely get it in a JSON or binary or other \'93inconvenient\'94 format. The first thing you need to do to be able to work with the data you\'92ve received is to serialize it in something your app understands. At the most simplest and basic level that would be a dictionary or array of objects containing other dictionaries, arrays, and primitives from that response.\
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs72 \cf6 13. What are the options for laying out UI on iOS?
\f0\b0\fs36 \cf4 \
Go-to options for laying out views on the screen are good old 
\b \cf4 CGRect Frames
\b0 \cf4  and 
\b \cf4 AutoLayout
\b0 \cf4 . Frames, along with auto-resizing masks, were used in the past before iOS 6 and are not a preferred option today. Frames are too error-prone and difficult to use because it\'92s hard to calculate precise coordinates and view sizes for various devices.\
\
There are other options for laying out views, such as 
\b \cf4 ASDK (Texture)
\b0 \cf4 , 
\b \cf4 ComponentKit
\b0 \cf4 , and 
\b \cf4 LayoutKit
\b0 \cf4 , that are more or less inspired by React. These alternatives are good in certain scenarios when, for example, you need to build highly dynamic and fast table views and collection views. AutoLayout is not always perfect for that and knowing there are other options is always good.\
\

\f3\b\fs72 \cf6 How do you manage dependencies?\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs36 \cf4 These days we have other dependency managers to choose from: 
\b \cf4 CocoaPods
\b0 \cf4 , 
\b \cf4 Carthage
\b0 \cf4 , and 
\b \cf4 Swift Package Manager (SPM)\
\
\pard\pardeftab720\partightenfactor0

\f3\fs72 \cf6 17. How do you debug and profile things on iOS?
\f0\fs36 \cf4 \
\pard\pardeftab720\partightenfactor0

\b0 \cf4 There's always the good old 
\f2\fs30\fsmilli15300 \cb5 NSLog
\f0\fs36 \cb1 ging and 
\f2\fs30\fsmilli15300 \cb5 print
\f0\fs36 \cb1 ing we can do in iOS apps. Also there are breakpoints you can set using Xcode. For performance of individual pieces of code you could use XCTest's measureBlock.\
You can do more advanced debugging and profiling using 
\b \cf4 Instruments
\b0 \cf4 . {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/index.html"}}{\fldrslt \cf7 \ul \ulc7 Instruments}} is a profiling tool that helps you profile your app and find memory leaks and performance issues at runtime.
\f3\b\fs72 \cf6 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs30 \cf2 \cb3 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f0\b\fs42 \cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
KVC:
\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\b \cf0 \cb3 KVC
\b0  is a form of coding that allows you to access an object\'92s properties indirectly, using strings to access them instead of the property\'92s accessors or instead of accessing the variables directly. To enable such mechanism, your classes must comply to the NSKeyValueCoding informal protocol. (OR)\cb1 \
\pard\pardeftab720\partightenfactor0

\i \cf0 \cb3 Key-value coding is a mechanism for accessing an object\'92s properties indirectly, using strings to identify properties, rather than through invocation of an accessor method or accessing them directly through instance variables.\
\
\pard\pardeftab720\partightenfactor0

\i0\b \cf0 4. How to pass a variable as a reference?
\b0 \cb1 \
\cb3 We can pass variable as a reference using 
\b inout
\b0  parameter. 
\b inout 
\b0 means that modifying the local variable will also modify the passed-in parameters.\
\

\b 6. What are the different Access Levels in swift?
\b0 \cb1 \
\cb3 Swift provides five different 
\i access levels
\i0  for entities within your code.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\i\b \cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Open access
\i0\b0 : Classes with open access can be subclassed or overridden by subclasses 
\b within the module where they\'92re defined
\b0  and 
\b within any module that imports the module where they\'92re defined.
\b0 \cb1 \
\ls6\ilvl0
\i\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Public access
\b0 : 
\i0 Classes with public access can be subclassed or overridden by subclasses 
\b only within the module where they\'92re defined.
\b0 \cb1 \
\ls6\ilvl0
\i\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Internal access:
\i0  
\b0 enables entities to be used within
\b  any source file from their defining module
\b0 , but not in any source file outside of that module.\cb1 \
\ls6\ilvl0
\i\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
File-private access:
\b0  
\i0 restricts the use of an entity to its 
\b own defining source file
\b0 .\cb1 \
\ls6\ilvl0
\i\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Private access:
\i0\b0  restricts the use of an entity to the enclosing declaration, and to extensions of that declaration that are in the same file.\
\pard\tx720\pardeftab720\partightenfactor0

\f1\fs30 \cf2 \cb3 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs42 \cf0 \cb3 1- How could you setup Live Rendering\'a0? 
\b0 \cb1 \
\cb3 The attribute {\field{\*\fldinst{HYPERLINK "http://twitter.com/IBDesignable"}}{\fldrslt \cb3 @IBDesignable}} lets Interface Builder perform live updates on a particular view.\
\

\b 7- Why don\'92t we use strong for enum property in Objective-C\'a0?\'a0\cb1 \uc0\u8232 
\b0 \cb3 Because enums aren\'92t objects, so we don\'92t specify strong or weak here.
\f1\fs30 \cf2 \cb3 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs42 \cf0 \cb3 10- Why do we use synchronized\'a0?\'a0\cb1 \uc0\u8232 
\b0 \cb3 synchronized guarantees that only one thread can be executing that code in the block at any given time.\
\

\b Read only
\b0 , we can set the property initially but then it can\'92t be changed.\
\
Code coverage is a metric that helps us to measure the value of our unit tests.\
\
 A ResponderChain is a hierarchy of objects that have the opportunity to respond to events received.\
\
Regular expressions are special string patterns that describe how to search through a string.\
\

\b 31- Explain MVC
\b0 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\b \cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Models
\b0 \uc0\u8202 \'97\u8202 responsible for the domain data or a data access layer which manipulates the data, think of \'91Person\'92 or \'91PersonDataProvider\'92 classes.\cb1 \
\ls7\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Views
\b0 \uc0\u8202 \'97\u8202 responsible for the presentation layer (GUI), for iOS environment think of everything starting with \'91UI\'92 prefix.\cb1 \
\ls7\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Controller/Presenter/ViewModel\uc0\u8202 
\b0 \'97\uc0\u8202 the glue or the mediator between the Model and the View, in general responsible for altering the Model by reacting to the user\'92s actions performed on the View and updating the View with changes from the Model.\
\pard\pardeftab720\partightenfactor0

\b \cf0 \cb3 32- Explain MVVM\'a0\cb1 \uc0\u8232 
\b0 \cb3 UIKit independent representation of your View and its state. The View Model invokes changes in the Model and updates itself with the updated Model, and since we have a binding between the View and the View Model, the first is updated accordingly.\
\

\b Grand Central Dispatch (GCD)\cb1 \uc0\u8232 \cb3 GCD
\b0  is a library that provides a low-level and object-based API to run tasks concurrently while managing threads behind the scenes. Terminology;\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\b \cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Dispatch Queues,
\b0  A dispatch queue is responsible for executing a task in the first-in, first-out order.\cb1 \
\ls8\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Serial Dispatch Queue
\b0  A serial dispatch queue runs tasks one at a time.\cb1 \
\ls8\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Concurrent Dispatch Queue
\b0  A concurrent dispatch queue runs as many tasks as it can without waiting for the started tasks to finish.\cb1 \
\ls8\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Main Dispatch Queue
\b0  A globally available serial queue that executes tasks on the application\'92s main thread.
\f1\fs30 \cf2 \cb3 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \
\
\
}